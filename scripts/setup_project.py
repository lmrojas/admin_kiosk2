# EL C√ìDIGO DE ESTE ARCHIVO PUEDE MODIFICARSE UNICAMENTE Y 
# SOLAMENTE SIGUIENDO LO ESTABLECIDO EN 'cura.md' Y 'project_custom_structure.txt'

import os
import sys
import subprocess
import platform
import venv
import argparse

class ProjectSetup:
    """
    Clase para configuraci√≥n y instalaci√≥n del proyecto de administraci√≥n de kiosks
    """

    @staticmethod
    def create_virtual_environment(venv_path='venv'):
        """
        Crear entorno virtual de Python
        
        Args:
            venv_path (str): Ruta del entorno virtual
        """
        try:
            print(f"üîß Creando entorno virtual en {venv_path}...")
            venv.create(venv_path, with_pip=True)
            print("‚úÖ Entorno virtual creado exitosamente")
        except Exception as e:
            print(f"‚ùå Error creando entorno virtual: {e}")
            sys.exit(1)

    @staticmethod
    def install_dependencies(venv_path='venv'):
        """
        Instalar dependencias del proyecto
        
        Args:
            venv_path (str): Ruta del entorno virtual
        """
        try:
            pip_path = os.path.join(venv_path, 'Scripts' if platform.system() == 'Windows' else 'bin', 'pip')
            
            print("üîç Instalando dependencias...")
            subprocess.check_call([pip_path, 'install', '-r', 'requirements.txt'])
            
            # Dependencias adicionales de desarrollo
            dev_dependencies = [
                'pytest', 
                'pytest-cov', 
                'flask-testing', 
                'coverage'
            ]
            subprocess.check_call([pip_path, 'install'] + dev_dependencies)
            
            print("‚úÖ Dependencias instaladas exitosamente")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando dependencias: {e}")
            sys.exit(1)

    @staticmethod
    def initialize_database():
        """
        Inicializar base de datos y migraciones
        """
        try:
            print("üóÑÔ∏è Inicializando base de datos...")
            subprocess.check_call(['flask', 'db', 'init'])
            subprocess.check_call(['flask', 'db', 'migrate', '-m', 'Initial migration'])
            subprocess.check_call(['flask', 'db', 'upgrade'])
            print("‚úÖ Base de datos inicializada")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error inicializando base de datos: {e}")
            sys.exit(1)

    @staticmethod
    def run_tests():
        """
        Ejecutar suite de pruebas
        """
        try:
            print("üß™ Ejecutando pruebas...")
            subprocess.check_call(['pytest', '-v', '--cov=app'])
            print("‚úÖ Pruebas ejecutadas exitosamente")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error en pruebas: {e}")
            sys.exit(1)

def main():
    """
    Funci√≥n principal para configuraci√≥n del proyecto
    """
    parser = argparse.ArgumentParser(description='Configuraci√≥n del proyecto Admin Kiosk')
    parser.add_argument('--skip-venv', action='store_true', help='Omitir creaci√≥n de entorno virtual')
    parser.add_argument('--skip-deps', action='store_true', help='Omitir instalaci√≥n de dependencias')
    parser.add_argument('--skip-db', action='store_true', help='Omitir inicializaci√≥n de base de datos')
    parser.add_argument('--skip-tests', action='store_true', help='Omitir ejecuci√≥n de pruebas')
    
    args = parser.parse_args()
    
    print("üöÄ Iniciando configuraci√≥n del proyecto Admin Kiosk")
    
    if not args.skip_venv:
        ProjectSetup.create_virtual_environment()
    
    if not args.skip_deps:
        ProjectSetup.install_dependencies()
    
    if not args.skip_db:
        ProjectSetup.initialize_database()
    
    if not args.skip_tests:
        ProjectSetup.run_tests()
    
    print("‚ú® Configuraci√≥n completada exitosamente")

if __name__ == '__main__':
    main() 